from rest_framework import serializers
from django.contrib.auth import get_user_model
from django.utils import timezone

from .models import (
    PatientProfile, DoctorProfile, Appointment, Medicine, Prescription,
    PrescriptionMedicine, LabReportRequest, LabReportResult, Notification
)

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id','username','email','first_name','last_name','role','phone','is_active')

#
# Registration serializer (used for self-register and receptionist-register)
#
class RegisterPatientSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True)
    dob = serializers.DateField(write_only=True, required=False)
    gender = serializers.ChoiceField(choices=[('M','Male'),('F','Female'),('O','Other')], write_only=True, required=False)
    address = serializers.CharField(write_only=True, required=False)
    blood_group = serializers.CharField(write_only=True, required=False)
    emergency_contact = serializers.CharField(write_only=True, required=False)

    class Meta:
        model = User
        fields = ('username','email','first_name','last_name','password','phone','dob','gender','address','blood_group','emergency_contact')

    def create(self, validated_data):
        # extract profile fields
        phone = validated_data.pop('phone', None)
        dob = validated_data.pop('dob', None)
        gender = validated_data.pop('gender', None)
        address = validated_data.pop('address', '')
        blood_group = validated_data.pop('blood_group', '')
        emergency_contact = validated_data.pop('emergency_contact', '')

        # create user as PATIENT
        user = User.objects.create_user(
            username=validated_data['username'],
            email=validated_data.get('email',''),
            password=validated_data['password'],
            first_name=validated_data.get('first_name',''),
            last_name=validated_data.get('last_name',''),
            role=User.ROLE_PATIENT,
            phone=phone
        )

        # determine registration type (receptionist vs self)
        request = self.context.get('request', None)
        if request and request.user.is_authenticated and request.user.role == User.ROLE_RECEPTIONIST:
            # receptionist created this patient
            patient_profile = user.patientprofile
            patient_profile.registration_type = PatientProfile.REGISTRATION_RECEPTIONIST
            patient_profile.registered_by = request.user
            patient_profile.is_verified = True
            patient_profile.verified_at = timezone.now()
            patient_profile.dob = dob
            patient_profile.gender = gender
            patient_profile.address = address
            patient_profile.blood_group = blood_group
            patient_profile.emergency_contact = emergency_contact
            patient_profile.save()
        else:
            # self-registered
            patient_profile = user.patientprofile
            patient_profile.registration_type = PatientProfile.REGISTRATION_SELF
            patient_profile.registered_by = None
            patient_profile.is_verified = False
            patient_profile.dob = dob
            patient_profile.gender = gender
            patient_profile.address = address
            patient_profile.blood_group = blood_group
            patient_profile.emergency_contact = emergency_contact
            patient_profile.save()

        return user

class PatientProfileSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    user_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=User.objects.filter(role=User.ROLE_PATIENT), source='user')

    registered_by = UserSerializer(read_only=True)

    class Meta:
        model = PatientProfile
        fields = ('id','user','user_id','dob','gender','address','blood_group','emergency_contact','registration_type','registered_by','is_verified','verified_at','created_at')

class DoctorProfileSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    user_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=User.objects.filter(role=User.ROLE_DOCTOR), source='user')

    class Meta:
        model = DoctorProfile
        fields = ('id','user','user_id','specialization','qualifications','experience','availability')

class AppointmentSerializer(serializers.ModelSerializer):
    patient = PatientProfileSerializer(read_only=True)
    patient_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=PatientProfile.objects.all(), source='patient')
    doctor = DoctorProfileSerializer(read_only=True)
    doctor_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=DoctorProfile.objects.all(), source='doctor')

    class Meta:
        model = Appointment
        fields = ('id','patient','patient_id','doctor','doctor_id','date','time','status','created_by','updated_at')

class MedicineSerializer(serializers.ModelSerializer):
    class Meta:
        model = Medicine
        fields = ('id','name','description')

class PrescriptionMedicineSerializer(serializers.ModelSerializer):
    class Meta:
        model = PrescriptionMedicine
        fields = ('id','medicine_name','dosage','duration','pharmacist_note','status')

class PrescriptionSerializer(serializers.ModelSerializer):
    items = PrescriptionMedicineSerializer(many=True, write_only=True)
    appointment = AppointmentSerializer(read_only=True)
    appointment_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=Appointment.objects.all(), source='appointment')

    class Meta:
        model = Prescription
        fields = ('id','doctor','patient','appointment','appointment_id','notes','items','created_at')

    def create(self, validated_data):
        items_data = validated_data.pop('items', [])
        prescription = Prescription.objects.create(**validated_data)
        for item in items_data:
            PrescriptionMedicine.objects.create(prescription=prescription, **item)
        return prescription

class LabReportRequestSerializer(serializers.ModelSerializer):
    doctor = DoctorProfileSerializer(read_only=True)
    doctor_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=DoctorProfile.objects.all(), source='doctor')
    patient = PatientProfileSerializer(read_only=True)
    patient_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=PatientProfile.objects.all(), source='patient')

    class Meta:
        model = LabReportRequest
        fields = ('id','doctor','doctor_id','patient','patient_id','appointment','test_name','status','created_at')

class LabReportResultSerializer(serializers.ModelSerializer):
    request = LabReportRequestSerializer(read_only=True)
    request_id = serializers.PrimaryKeyRelatedField(write_only=True, queryset=LabReportRequest.objects.all(), source='request')

    class Meta:
        model = LabReportResult
        fields = ('id','request','request_id','pathologist','result_file','result_text','created_at','is_final')

class NotificationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = ('id','user','message','type','is_read','created_at')


old when error occures
